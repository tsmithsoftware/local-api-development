// Mocks generated by Mockito 5.3.2 from annotations
// in user_management/test/features/list_users/data/datasources/user_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:objectbox/src/native/box.dart' as _i3;
import 'package:objectbox/src/native/query/query.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQueryBuilder_0<T> extends _i1.SmartFake
    implements _i2.QueryBuilder<T> {
  _FakeQueryBuilder_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<T> extends _i1.Mock implements _i3.Box<T> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int put(
    T? object, {
    _i3.PutMode? mode = _i3.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
      ) as int);
  @override
  _i4.Future<int> putAsync(
    T? object, {
    _i3.PutMode? mode = _i3.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  int putQueued(
    T? object, {
    _i3.PutMode? mode = _i3.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueued,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
      ) as int);
  @override
  List<int> putMany(
    List<T>? objects, {
    _i3.PutMode? mode = _i3.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putMany,
          [objects],
          {#mode: mode},
        ),
        returnValue: <int>[],
      ) as List<int>);
  @override
  T? get(int? id) => (super.noSuchMethod(Invocation.method(
        #get,
        [id],
      )) as T?);
  @override
  List<T?> getMany(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMany,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue: <T?>[],
      ) as List<T?>);
  @override
  List<T> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <T>[],
      ) as List<T>);
  @override
  _i2.QueryBuilder<T> query([_i2.Condition<T>? qc]) => (super.noSuchMethod(
        Invocation.method(
          #query,
          [qc],
        ),
        returnValue: _FakeQueryBuilder_0<T>(
          this,
          Invocation.method(
            #query,
            [qc],
          ),
        ),
      ) as _i2.QueryBuilder<T>);
  @override
  int count({int? limit = 0}) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
          {#limit: limit},
        ),
        returnValue: 0,
      ) as int);
  @override
  bool isEmpty() => (super.noSuchMethod(
        Invocation.method(
          #isEmpty,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool contains(int? id) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [id],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool containsMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #containsMany,
          [ids],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: false,
      ) as bool);
  @override
  int removeMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeMany,
          [ids],
        ),
        returnValue: 0,
      ) as int);
  @override
  int removeAll() => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: 0,
      ) as int);
}
